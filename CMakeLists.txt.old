cmake_minimum_required(VERSION 3.2.0)


# include the toolchain file
include(arm_toolchain.cmake)

# specify the cmake directories 
set(CMAKE_SOURCE_DIR src)
set(CMAKE_BINARY_DIR build )

set(CMAKE_PROJECT_DIR 
        D:/stimveda_codebase/v_2_Ease/PROJECT/NRF_projects/v_2.0.0
)

message("the openocd is here $ENV{OPENOCD}")

project(EASE_Firmware
       VERSION 2.0.0 )

enable_language(C ASM)


# specify whether u want to generate DEbug or release Version
set(DEBUG_Flags 
        -O0 -g3
        )

# set(RELEASE_Flags 
#         -O3 
#         )


# specify the C standard and the c extensions

set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)


# also export compile commadnds 
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)


############################################################################################################################################################
#############################################################################################################################################################
##############################################################################################################################################################
##########################################################   specify the sdk directoreis for BLE stack and nordic source 

# specify the sdk directory nd the project directory 
set(NRF_SDK_DIR  D:/stimveda_codebase/v_2_Ease/nRF5_SDK_17)

set( LINKER_SRCH_PATH 
        D:/stimveda_codebase/v_2_Ease/PROJECT/NRF_projects/v_2.0.0
        )

set(linker_Script 
        nrf52_linker_script.ld
    )


set(NIMBLE_PATH 
        D:/stimveda_codebase/v_2_Ease/nRF5_SDK_17/external/mynewt-nimble 
    )

set(NRFX_DRIV_PATH
        # D:/stimveda_codebase/v_2_Ease/nrfx 
        D:/stimveda_codebase/v_2_Ease/nRF5_SDK_17/modules/nrfx
        )



############################################################################################################################
###############################################################################################################################
################################################################################################################################
############################################# specify the flags , compiler , linker , etc  ###########################################################
set(COMMON_DEFINES 
        -DBOARD_PCA10040
        -DCONFIG_GPIO_AS_PINRESET # make a GPIO to use as a pin reset 
        -DFLOAT_ABI_HARD # this will do this  __FPU_USED = 1
        # -DFLOAT_ABI_SOFT

        # -D__START=main 
        -D__HEAP_SIZE=8192 # specify the minimum heap and stack size 
        -D__STACK_SIZE=8192 # 8 Kb space 
        -DFREERTOS
        -DNRF52
        -DNRF52832_XXAA  
        -DNRF52_PAN_74
        -DCONFIG_NFCT_PINS_AS_GPIOS
        -DARM_MATH_CM4=1
        -DENABLE_FAULT_HANDLERS=1

        # -DDEBUG  # if you want to debug the code then check it otherwise comment it 
        # -DSOFTDEVICE_PRESENT # tell the compiler that softdevice is present 
        # -DENABLE_SWO # uncomment it if you want to enable serial wire output 
)

set(COMMON_C_FLAGS        
        -mcpu=cortex-m4
        -mfloat-abi=hard
        -mfpu=fpv4-sp-d16
        # -mfloat-abi=soft #for  using the soft floating point library 
        ${DEBUG_Flags}
        ${RELEASE_Flags}
        -mthumb
        -mabi=aapcs
        -Wall -Werror 
        # -Wno-discarded-qualifiers
        # keep every  function in a separate section, this allows linker to discard unused ones
        -ffunction-sections
        -fdata-sections
        -fno-strict-aliasing
        -fno-builtin
        -fshort-enums
        # # must have to include this because in nimble stack there are function used by ble stack which are not declared to them
        -Wno-format
)


set(LINKER_FLAGS 
        -L${LINKER_SRCH_PATH}
        -T${linker_Script}
        -mcpu=cortex-m4
        -mthumb -mabi=aapcs
        -mfloat-abi=hard -mfpu=fpv4-sp-d16
        ${DEBUG_Flags}
        -Wl,-Map=${PROJECT_NAME}.map
        -Wl,--gc-sections  --specs=nano.specs
        -Wl,--start-group
        -lstdc++
        -Wl,--end-group
        -lc
        -lnosys
        -lm
        -Wl,--print-memory-usage
    )

###########################################################################################################################################################
##########################################################################################################################################################
#########################################################################################################################################################
############################################################## specify the source files and the include directories 



###########################################################################################################################################################
##########################################################################################################################################################
#########################################################################################################################################################
############################################################## specify the main source files of your project here 

set(PROJECT_FILES
${CMAKE_SOURCE_DIR}/main/main.c


)

set(PROJECT_INCLUDE_DIR

        )
###########################################################################################################################################################
##########################################################################################################################################################
#########################################################################################################################################################
############################################################## set the SDK libs and startup file for the NRF52
# specify the source files 
set( SDK_SRC_FILES

# ${NRF_SDK_DIR}/components/boards/boards.c 

# these are the satrtup and system init files that is used to start the Micro
${NRF_SDK_DIR}/modules/nrfx/mdk/gcc_startup_nrf52.S 
${NRF_SDK_DIR}/modules/nrfx/mdk/system_nrf52.c 


# # nordic log module 
# ${NRF_SDK_DIR}/components/libraries/log/src/nrf_log_frontend.c 
# ${NRF_SDK_DIR}/components/libraries/log/src/nrf_log_str_formatter.c 

  # std libs library 
# ${NRF_SDK_DIR}/components/libraries/button/app_button.c 

# util platform error handler , gcc error handler 
# ${NRF_SDK_DIR}/components/libraries/util/app_error.c 
# ${NRF_SDK_DIR}/components/libraries/util/app_error_handler_gcc.c 
# ${NRF_SDK_DIR}/components/libraries/util/app_error_weak.c 
# ${NRF_SDK_DIR}/components/libraries/util/app_util_platform.c 
# ${NRF_SDK_DIR}/components/libraries/util/nrf_assert.c 
# ${NRF_SDK_DIR}/components/libraries/timer/app_timer_freertos.c 
# ${NRF_SDK_DIR}/components/libraries/atomic/nrf_atomic.c 
# ${NRF_SDK_DIR}/components/libraries/memobj/nrf_memobj.c 
# ${NRF_SDK_DIR}/components/libraries/ringbuf/nrf_ringbuf.c 
# ${NRF_SDK_DIR}/components/libraries/strerror/nrf_strerror.c 
# ${NRF_SDK_DIR}/components/libraries/balloc/nrf_balloc.c 
# ${NRF_SDK_DIR}/components/boards/boards.c 
# contains the 
# ${NRF_SDK_DIR}/components/drivers_nrf/nrf_soc_nosd/nrf_nvic.c 
# ${NRF_SDK_DIR}/components/drivers_nrf/nrf_soc_nosd/nrf_soc.c 


# integration library for the clock and power modules 

# the nrf clcok hal for the clock inits
# ${NRF_SDK_DIR}/integration/nrfx/legacy/nrf_drv_clock.c
# ${NRF_SDK_DIR}/modules/nrfx/drivers/src/nrfx_clock.c 

# # nrf power driver for power regulation system 
# ${NRF_SDK_DIR}/integration/nrfx/legacy/nrf_drv_power.c
# ${NRF_SDK_DIR}/modules/nrfx/drivers/src/nrfx_power.c 

# build the driver library for the uart 
# ${NRF_SDK_DIR}/integration/nrfx/legacy/nrf_drv_uart.c
# ${NRF_SDK_DIR}/modules/nrfx/drivers/src/nrfx_uart.c 


# ${NRF_SDK_DIR}/modules/nrfx/soc/nrfx_atomic.c 
# build the file for power init 
# include the nrf uart peripheral driver 

# ${NRF_SDK_DIR}/modules/nrfx/drivers/src/nrfx_gpiote.c 

# segger RTT support 
# ${NRF_SDK_DIR}/external/segger_rtt/SEGGER_RTT_Syscalls_GCC.c
# ${NRF_SDK_DIR}/external/segger_rtt/SEGGER_RTT.c
# ${NRF_SDK_DIR}/external/segger_rtt/SEGGER_RTT_printf.c

# the file printf format library 
# ${NRF_SDK_DIR}/external/fprintf/nrf_fprintf.c 
# ${NRF_SDK_DIR}/external/fprintf/nrf_fprintf_format.c 
# the source file of your project
        ${PROJECT_FILES}
)

      
# specify the include directories 
set(SDK_INCLUDE_DIR 

      ${NRF_SDK_DIR}/external/freertos/include 
      ${CMAKE_PROJECT_DIR}/src/config


# arm math library ffor the computation of the floats, and math operations
        ${NRF_SDK_DIR}/components/toolchain/cmsis/dsp/Include
      ${NRF_SDK_DIR}/components   # contains the file sdk validation .h to check the sdkconfig is correct or not 
      
      # this contains the app error handlers 
      ${NRF_SDK_DIR}/components/libraries/util 
#       ${NRF_SDK_DIR}/components/libraries/balloc 
#       ${NRF_SDK_DIR}/components/libraries/ringbuf 
#       ${NRF_SDK_DIR}/components/libraries/bsp 
#       ${NRF_SDK_DIR}/components/libraries/log cd
#       ${NRF_SDK_DIR}/components/libraries/button 
#       ${NRF_SDK_DIR}/components/libraries/timer 
#       ${NRF_SDK_DIR}/components/libraries/strerror 
#       ${NRF_SDK_DIR}/components/libraries/atomic 
#       ${NRF_SDK_DIR}/components/libraries/memobj 
#       ${NRF_SDK_DIR}/components/libraries/experimental_section_vars 

# this contains the log library structure for the nrf
#       ${NRF_SDK_DIR}/components/libraries/log/src 
#       ${NRF_SDK_DIR}/components/libraries/log
#       ${NRF_SDK_DIR}/components/libraries/delay
#       ${NRF_SDK_DIR}/components/boards 
      ${NRF_SDK_DIR}/components/drivers_nrf/nrf_soc_nosd 

      ${NRF_SDK_DIR}/components/toolchain/cmsis/include 
      


      # path for the NRFX driver API v 2.10
      ${NRFX_DRIV_PATH}
      ${NRFX_DRIV_PATH}/hal 
      ${NRFX_DRIV_PATH}/nrfx 
      ${NRFX_DRIV_PATH}/mdk 
      ${NRFX_DRIV_PATH}/drivers/include 

      ${NRF_SDK_DIR}/integration/nrfx/legacy 
      ${NRF_SDK_DIR}/integration/nrfx 
      


      # set the external include directories for segger RTT
      ${PROJECT_INCLUDE_DIR}
      )




###########################################################################################################################################################
##########################################################################################################################################################
#########################################################################################################################################################
############################################################## set the FREERTOS sources and include directories 


# freertos source files 
set(FREERTOS_SRC
        # freertos specific libraries 
        ${NRF_SDK_DIR}/external/freertos/source/croutine.c 
        ${NRF_SDK_DIR}/external/freertos/source/event_groups.c 
        ${NRF_SDK_DIR}/external/freertos/source/list.c 
        ${NRF_SDK_DIR}/external/freertos/source/queue.c 
        ${NRF_SDK_DIR}/external/freertos/source/stream_buffer.c 
        ${NRF_SDK_DIR}/external/freertos/source/tasks.c 
        ${NRF_SDK_DIR}/external/freertos/source/timers.c 
        ${NRF_SDK_DIR}/external/freertos/source/portable/MemMang/heap_4.c 

        # freerttos porting code for nrf52 target 
        ${NRF_SDK_DIR}/external/freertos/portable/GCC/nrf52/port.c
        # ${NRF_SDK_DIR}/external/freertos/portable/ARM_CM4F/port.c 
        ${NRF_SDK_DIR}/external/freertos/portable/CMSIS/nrf52/port_cmsis.c 
        ${NRF_SDK_DIR}/external/freertos/portable/CMSIS/nrf52/port_cmsis_systick.c 

        # there is a freertos addition in which two functions are defined 
        ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/freertos_addition/static_func_support.c
        )

# # set the freertos include directories 

set(FREERTOS_INCLUDE 

        ${NRF_SDK_DIR}/external/freertos/source/include 

        #porting libs code  for the nrf52 target 
        ${NRF_SDK_DIR}/external/freertos/portable/GCC/nrf52
        ${NRF_SDK_DIR}/external/freertos/portable/CMSIS/nrf52 
        # ${NRF_SDK_DIR}/external/freertos/portable/CMSIS/nrf52
        )

add_library(freertos_lib STATIC 
            ${FREERTOS_SRC}
            )



target_compile_definitions(freertos_lib PRIVATE
        ${COMMON_DEFINES}   
 
)

target_compile_options(freertos_lib PRIVATE
           ${COMMON_C_FLAGS}
           $<$<COMPILE_LANGUAGE:C>:  -Wno-unused-but-set-variable -Wno-maybe-uninitialized>
           $<$<COMPILE_LANGUAGE:CXX>:  -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-rtti>
           $<$<COMPILE_LANGUAGE:ASM>: -MP -MD -x assembler-with-cpp>
             )


target_include_directories(freertos_lib PUBLIC SYSTEM 
        ${FREERTOS_INCLUDE}
        ${SDK_INCLUDE_DIR}
            )


     
    
# ############################################################################################################################################

#############################################################################################################################
##########################################################################################################################################################
#########################################################################################################################################################
############################################################## build the nimble ble stack library

set(NIMBLE_STACK_DEFINES  
        # -DMYNEWT_VAL_BLE_LL_RFMGMT_ENABLE_TIME=1500
        -DNIMBLE_CFG_CONTROLLER=1
        -DNIMBLE_CFG_HOST=1
        )

################################################################################
################################################################################
####################################################################################
# the tiny crypto source  
set(TINYCRYPT_SRC
        # the tiny crypto library used by the nimble 
        ${NIMBLE_PATH}/ext/tinycrypt/src/aes_encrypt.c
        ${NIMBLE_PATH}/ext/tinycrypt/src/utils.c
        ${NIMBLE_PATH}/ext/tinycrypt/src/cmac_mode.c
        ${NIMBLE_PATH}/ext/tinycrypt/src/ecc.c
        ${NIMBLE_PATH}/ext/tinycrypt/src/ecc_dh.c
        )

# # set the tiny_crpto_include 
set(TINYCRYPT_INCLUDE 
        ${NIMBLE_PATH}/ext/tinycrypt/include
        )

################################################################################
################################################################################
##############  the nimble host 

set(NIMBLE_HOST_SRC
        # the complete host layer 
        ${NIMBLE_PATH}/nimble/host/src/ble_hs.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_hci_evt.c
        ${NIMBLE_PATH}/nimble/host/src/ble_l2cap_sig_cmd.c
        ${NIMBLE_PATH}/nimble/host/src/ble_l2cap_sig.c
        ${NIMBLE_PATH}/nimble/host/src/ble_l2cap.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_mbuf.c
        ${NIMBLE_PATH}/nimble/host/src/ble_sm.c
        ${NIMBLE_PATH}/nimble/host/src/ble_sm_cmd.c
        ${NIMBLE_PATH}/nimble/host/src/ble_sm_lgcy.c
        ${NIMBLE_PATH}/nimble/host/src/ble_sm_alg.c
        ${NIMBLE_PATH}/nimble/host/src/ble_sm_sc.c
        ${NIMBLE_PATH}/nimble/host/src/ble_gap.c
        ${NIMBLE_PATH}/nimble/host/src/ble_gatts.c
        ${NIMBLE_PATH}/nimble/host/src/ble_gattc.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_conn.c
        ${NIMBLE_PATH}/nimble/host/src/ble_att_svr.c
        ${NIMBLE_PATH}/nimble/host/src/ble_store.c
        ${NIMBLE_PATH}/nimble/host/src/ble_store_util.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_pvcy.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_hci.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_log.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_hci_util.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_hci_cmd.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_cfg.c
        ${NIMBLE_PATH}/nimble/host/src/ble_uuid.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_id.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_misc.c
        ${NIMBLE_PATH}/nimble/host/src/ble_att.c
        ${NIMBLE_PATH}/nimble/host/src/ble_att_clt.c
        ${NIMBLE_PATH}/nimble/host/src/ble_att_svr.c
        ${NIMBLE_PATH}/nimble/host/src/ble_att_cmd.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_atomic.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_adv.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_flow.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_mqueue.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_stop.c
        ${NIMBLE_PATH}/nimble/host/src/ble_hs_startup.c
        # the ram API to store the database for the peer connection 
        ${NIMBLE_PATH}/nimble/host/store/ram/src/ble_store_ram.c
        # the gap and gatt layer that is neccesary for ble device 
        ${NIMBLE_PATH}/nimble/host/services/gap/src/ble_svc_gap.c
        ${NIMBLE_PATH}/nimble/host/services/gatt/src/ble_svc_gatt.c
        
        ${NIMBLE_PATH}/nimble/host/util/src/addr.c

        ${NIMBLE_PATH}/nimble/host/src/ble_monitor.c
        )

set(NIMBLE_HOST_INCLUDE
        # the API used at the application layer for the nimble ble layer 
        ${NIMBLE_PATH}/nimble/host/include

        ${NIMBLE_PATH}/nimble/host/services/gap/include
        ${NIMBLE_PATH}/nimble/host/services/gatt/include
        #contains the address utilities 
        ${NIMBLE_PATH}/nimble/host/util/include
        # usage of ram to store the database table for the peer connection
        ${NIMBLE_PATH}/nimble/host/store/ram/include
        )
################################################################################
################################################################################
################# the nimble controller 

set(NIMBLE_CONTROLLER_SRC

        ${NIMBLE_PATH}/nimble/controller/src/ble_ll.c
        ${NIMBLE_PATH}/nimble/controller/src/ble_ll_rand.c
        ${NIMBLE_PATH}/nimble/controller/src/ble_ll_conn.c
        ${NIMBLE_PATH}/nimble/controller/src/ble_ll_ctrl.c
        ${NIMBLE_PATH}/nimble/controller/src/ble_ll_hci.c
        ${NIMBLE_PATH}/nimble/controller/src/ble_ll_conn_hci.c
        ${NIMBLE_PATH}/nimble/controller/src/ble_ll_utils.c
        ${NIMBLE_PATH}/nimble/controller/src/ble_ll_scan.c
        ${NIMBLE_PATH}/nimble/controller/src/ble_ll_whitelist.c
        ${NIMBLE_PATH}/nimble/controller/src/ble_ll_adv.c
        ${NIMBLE_PATH}/nimble/controller/src/ble_ll_sched.c
        ${NIMBLE_PATH}/nimble/controller/src/ble_ll_supp_cmd.c
        ${NIMBLE_PATH}/nimble/controller/src/ble_ll_hci_ev.c
        ${NIMBLE_PATH}/nimble/controller/src/ble_ll_rfmgmt.c
        ${NIMBLE_PATH}/nimble/controller/src/ble_ll_resolv.c
        )

set(NIMBLE_CONTROLLER_INCLUDE
        ${NIMBLE_PATH}/nimble/controller/include              
)

################################################################################
################################################################################
################# the nimble HCI layer aka transport layer for host -- controller

set(NIMBLE_HCI_SRC 
        ${NIMBLE_PATH}/nimble/transport/ram/src/ble_hci_ram.c
        )

set(NIMBLE_HCI_INCLUDE 
        ${NIMBLE_PATH}/nimble/transport/ram/include
)
################################################################################
################################################################################
################# the nimble operating system 

set(NIMBLE_OS_SRC 
        ${NIMBLE_PATH}/porting/nimble/src/os_cputime.c
        ${NIMBLE_PATH}/porting/nimble/src/os_cputime_pwr2.c
        ${NIMBLE_PATH}/porting/nimble/src/os_mbuf.c
        ${NIMBLE_PATH}/porting/nimble/src/os_mempool.c
        ${NIMBLE_PATH}/porting/nimble/src/hal_timer.c
        ${NIMBLE_PATH}/porting/nimble/src/mem.c
        ${NIMBLE_PATH}/porting/nimble/src/endian.c
        ${NIMBLE_PATH}/porting/nimble/src/os_msys_init.c
        
        # this is the code required to run the porting code of nimble 
        ${NIMBLE_PATH}/porting/nimble/src/nimble_port.c

        # freertos porting layer 
        ${NIMBLE_PATH}/porting/npl/freertos/src/nimble_port_freertos.c
        ${NIMBLE_PATH}/porting/npl/freertos/src/npl_os_freertos.c
        )

set(NIMBLE_OS_INCLUDE 
        ${NIMBLE_PATH}/porting/nimble/include
        ${NIMBLE_PATH}/porting/npl/freertos/include
        # set the path to nimble include
        ${NIMBLE_PATH}/nimble/include
        ${FREERTOS_INCLUDE}
        )

################################################################################
################################################################################
############## the nimble radio drivers 

set(NIMBLE_RADIO_DRIVER_SRC
        ${NIMBLE_PATH}/nimble/drivers/nrf52/src/ble_hw.c
        ${NIMBLE_PATH}/nimble/drivers/nrf52/src/ble_phy.c
        )

set(NIMBLE_RADIO_DRIVER_INCLUDE
        ${NIMBLE_PATH}/nimble/drivers/nrf52/include
)
################################################################################
################################################################################
####################################################################################


add_library(nimble_ble_stack STATIC 
        ${TINYCRYPT_SRC}
        ${NIMBLE_HOST_SRC}
        ${NIMBLE_CONTROLLER_SRC}
        ${NIMBLE_OS_SRC}
        ${NIMBLE_RADIO_DRIVER_SRC}
        ${NIMBLE_HCI_SRC}
            )



target_compile_definitions(nimble_ble_stack PRIVATE
        ${COMMON_DEFINES}
        ${NIMBLE_STACK_DEFINES}  

 
)

target_compile_options(nimble_ble_stack PRIVATE
           ${COMMON_C_FLAGS}
           $<$<COMPILE_LANGUAGE:C>:  -Wno-unused-but-set-variable -Wno-maybe-uninitialized -Wno-implicit-function-declaration> 
           $<$<COMPILE_LANGUAGE:CXX>:  -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-rtti -Wno-implicit-function-declaration>
           $<$<COMPILE_LANGUAGE:ASM>: -MP -MD -x assembler-with-cpp>
             )

      
target_include_directories(nimble_ble_stack PUBLIC SYSTEM 
        ${TINYCRYPT_INCLUDE}
        ${NIMBLE_HOST_INCLUDE}
        ${NIMBLE_CONTROLLER_INCLUDE}
        ${NIMBLE_OS_INCLUDE}
        ${NIMBLE_RADIO_DRIVER_INCLUDE}
        ${NIMBLE_HCI_INCLUDE} 
        # the sdk include directory 
        ${SDK_INCLUDE_DIR} 
            )


##################################################################################################################################################################
############################################################################################################################################################################
##############################################################################################################################################################################
#############################

##################################################################################################################################################################
############################################################################################################################################################################
##############################################################################################################################################################################
##########################################################   Build the SDK stdlib files   ##################################################################################
list(APPEND 
    SDK_SRC_FILES
    # gpio related library , also gpio task and events 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/gpio/gpio.c
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/gpio/gpiote.c 
    
    # the I2c library for the nrf
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/i2c/i2c.c
    # create the thread safe API
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/i2c/i2c_thread_safe.c
    
    # spi library for the nrf52 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/spi/spi.c
    # spi thread safe library for using with retos enviournment 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/spi/spi_thread_safe.c
    
    # system related library 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/system/system.c 
    # implement the low level system calls 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/system/sys_calls.c
    # implement the mem management of heap
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/system/sysmem.c

    # the timer related libraries 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/timer/timer.c 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/timer/nrf_time.c 
    
    # uart related libraries 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/uart/uart_drv.c
    # uart logging library for log the serial data using ring buffer, thread safe API
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/uart/uart_logs.c
    
    #ppi related libraries  
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/ppi/ppi.c
    
    # adc related library 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/adc/adc.c
    
    # watchdog timer API 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/watchdog/watchdog.c
    
    # the block protection API
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/bprot/bprot.c 
    
    # flash accesss API to read write flash
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/flash/flash_write.c 

    )

list(APPEND 
    SDK_INCLUDE_DIR 
           # gpio related library , also gpio task and events 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/gpio
    # the I2c library for the nrf
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/i2c
    # spi library for the nrf52 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/spi
    # system related library 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/system 
    # the timer related libraries 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/timer  
    # uart related libraries 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/uart
        #ppi related libraries  
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/ppi
    # adc related library 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/adc
    # watchdog timer API 
    ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/watchdog
        # the block protection API
        ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/bprot 
        # flash accesss API to read write flash
        ${CMAKE_SOURCE_DIR}/libs/nrf_HAL/flash 
    )




#######################################################################################3###########################
##################################################################################################
##################################################################################################

    # deifne the external libraries for the sensors ans peropheral that connect with nrf52
set(EXTERNAL_LIBS_SRC
        # the  libraries to use 
        # acccelrometer libraries 
        ${CMAKE_SOURCE_DIR}/libs/components/accelrometer/st_accelrometer.c

        # eeg library 
        ${CMAKE_SOURCE_DIR}/libs/components/eeg/eeg.c 

        # fuel gauge library
        ${CMAKE_SOURCE_DIR}/libs/components/fuel_gauge/fuel_gauge.c

        # tdcs library 
        ${CMAKE_SOURCE_DIR}/libs/components/tdcs/tdcs.c 

        # ble library 
        ${CMAKE_SOURCE_DIR}/libs/components/ble/ble_init_routine.c
             
        )

set(EXTERNAL_LIB_INCLUDE_DIR
        # the  libraries header file paths 
        # acccelrometer libraries 
        ${CMAKE_SOURCE_DIR}/libs/components/accelrometer

        # eeg library 
        ${CMAKE_SOURCE_DIR}/libs/components/eeg

        # fuel gauge library
        ${CMAKE_SOURCE_DIR}/libs/components/fuel_gauge

        # tdcs library 
        ${CMAKE_SOURCE_DIR}/libs/components/tdcs

        # BLE  library 
        ${CMAKE_SOURCE_DIR}/libs/components/ble
     
        )



        # make a library of external 
add_library(ext_components STATIC 
${EXTERNAL_LIBS_SRC}
)



target_compile_definitions(ext_components PRIVATE
    ${COMMON_DEFINES}   
#     ${NIMBLE_STACK_DEFINES}

)

target_compile_options(ext_components PRIVATE
       ${COMMON_C_FLAGS}
       $<$<COMPILE_LANGUAGE:C>:  -Wno-unused-but-set-variable -Wno-maybe-uninitialized >
       $<$<COMPILE_LANGUAGE:CXX>: -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-rtti >
       $<$<COMPILE_LANGUAGE:ASM>: -MP -MD -x assembler-with-cpp>
         )


target_include_directories(ext_components PUBLIC SYSTEM 
    ${EXTERNAL_LIB_INCLUDE_DIR}
    ${SDK_INCLUDE_DIR}
    ${FREERTOS_INCLUDE}

    # nimble inclludes 
    ${NIMBLE_HOST_INCLUDE}
    ${NIMBLE_OS_INCLUDE}
    ${NIMBLE_APP_LAYER_INCLUDE}
        )



##############################################################################
###########################################################################################3
################################################################################################
######################################################################################################
####################################################################################################


# specify the executable 
set(EXECUTABLE ${PROJECT_NAME}.elf )

add_executable(${EXECUTABLE} ${SDK_SRC_FILES})


target_include_directories(${EXECUTABLE} PRIVATE
             ${SDK_INCLUDE_DIR}
             ${EXTERNAL_LIB_INCLUDE_DIR}

        )

        
target_compile_definitions(${EXECUTABLE} PRIVATE
    # specify the common definees     
    ${COMMON_DEFINES}

)


target_compile_options(${EXECUTABLE} PRIVATE
    
        # C flags common to all targets
        ${COMMON_C_FLAGS}

        )



target_link_libraries(${EXECUTABLE}
                       freertos_lib
                       ext_components
                       nimble_ble_stack
                #        gpio_lib # no library gpio_lib so cmake discard it 
                        )

                        # specify the linker options 
target_link_options(${EXECUTABLE} PRIVATE

        ${LINKER_FLAGS}

        )

     



##################################################################################################################################################################
############################################################################################################################################################################
##############################################################################################################################################################################
##########################################################   create extra files from the build hex and bin format  ##################################################################################

# Create hex file
add_custom_command(TARGET ${EXECUTABLE}
        POST_BUILD

        COMMAND echo  "Succesfully build YOUR Project  :)"
        COMMAND echo  "BUilding Extra Files Hex, BIN "
        
        COMMAND ${CMAKE_OBJCOPY} -O ihex ${EXECUTABLE} ${PROJECT_NAME}.hex
        COMMAND ${CMAKE_OBJCOPY} -O binary ${EXECUTABLE} ${PROJECT_NAME}.bin
        )


                #Print executable size
add_custom_command(TARGET ${EXECUTABLE}
        POST_BUILD
        COMMAND echo " THe Size of your project is shown below :) "
        COMMAND ${CMAKE_SIZE_UTIL} ${EXECUTABLE}
        )



##################################################################################################################################################################
############################################################################################################################################################################
##############################################################################################################################################################################
##########################################################   make a Custom target to flash the binaries  ##################################################################################

# add a custom target to start the openopcd server 
set(openocdtool  
     $ENV{OPENOCD}/openocd 
        )
    
set(openocd_scripts 
        -f $ENV{OPENOCD_SCRIPTS}/interface/jlink.cfg 
        -f $ENV{OPENOCD_SCRIPTS}/target/nrf52.cfg 
        )
add_custom_target(openocd_start
                
                COMMAND ${openocdtool} ${openocd_scripts}
                    )



# add_custom_target(merge_hex_files )




##################################################################################################################################################################
############################################################################################################################################################################
##############################################################################################################################################################################
##########################################################   make a Custom target to flash the binaries  ##################################################################################
set(python_path 
        D:\\stimveda_codebase\\v_2_Ease\\PROJECT\\NRF_projects\\v_2.0.0\\python)


add_custom_target(flash 
                COMMAND echo "flashing ${PROJECT_NAME}.elf into the nrf52832"
                COMMAND nrfjprog -f nrf52 --program ${PROJECT_NAME}.hex --sectorerase --verify
                COMMAND nrfjprog -f nrf52 --reset
                )

add_custom_target(erase_chip
                COMMAND echo "erasing the nrf52832 chip"
                COMMAND nrfjprog -f nrf52 --eraseall)

add_custom_target(recover
                COMMAND echo "recovering the nrf52832 chip"
                COMMAND nrfjprog -f nrf52 --recover)

add_custom_target(test
                COMMAND echo "testing Host Application for device "
                COMMAND python ${python_path}/test_app.py)

add_custom_target(flash_softdevice
                COMMAND echo Flashing: s132_nrf52_7.2.0_softdevice.hex
                COMMAND nrfjprog -f nrf52 --program ${NRF_SDK_DIR}/components/softdevice/s132/hex/s132_nrf52_7.2.0_softdevice.hex --sectorerase
                COMMAND nrfjprog -f nrf52 --reset
                )


